export default class StipplingCanvasContainer {
    
    constructor(height, width) {
        this.htmlContainer = document.createElement("div");
        this.htmlContainer.height = height + 50;
        this.htmlContainer.width = width + 50;
        this.title = document.createElement("h3");
        this.title.innerHTML = "Stippling";
        this.htmlContainer.appendChild(this.title);
        this.canvas = document.createElement("canvas");
        this.canvas.height = height;
        this.canvas.width = width;
        this.context = this.canvas.getContext('2d');
        this.htmlContainer.appendChild(this.canvas);
        this.description = document.createElement("p");
        this.description.innerHTML = "For each point generated by the sample, dots are placed on the canvas.  The size of each dot is determined by the point's grayscale value in the original image";
        this.htmlContainer.appendChild(this.description);
    }

    drawNextStipplingPoint(points) {
        if (points.length === 0) { return; }
        this.drawPoint(points[0].coords);
        setTimeout(() => this.drawNextStipplingPoint(points.slice(1)), 1);
    }

    drawPoint(point) {
        const pixelData = this.imgContext.getImageData(point[0], point[1], 1, 1).data.slice(0, 3);
        const grayValue = pixelData.reduce((memo, val) => memo + val, 0) / 3;
        const dotRadius = (((255 - grayValue) / 255)) * (this.maxDotRadius / 2);
        this.context.beginPath();
        this.context.arc(point[0], point[1], dotRadius, 0, 2 * Math.PI);
        this.context.fill();
    }

    renderSample(imgContext, points, maxDotRadius) {
        this.imgContext = imgContext;
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.maxDotRadius = maxDotRadius;
        this.drawNextStipplingPoint(points);
    }
}
